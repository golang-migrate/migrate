package gbase8s

import (
	"testing"

	_ "gitee.com/GBase8s/go-gci"
	"github.com/golang-migrate/migrate/v4"
	dt "github.com/golang-migrate/migrate/v4/database/testing"
	_ "github.com/golang-migrate/migrate/v4/source/file"
)

var gbaseDNS = "gbase8s://username:userpasswd@ip:port/dbname?GBASEDBTSERVER=gbaseserver&GCI_FACTORY=4&PROTOCOL=onsoctcp&delimident=1&sqlmode=oracle"

func Test(t *testing.T) {
	p := &Gbase8s{}
	d, err := p.Open(gbaseDNS)
	if err != nil {
		t.Fatal(err)
	}
	defer func() {
		if err := d.Close(); err != nil {
			t.Error(err)
		}
	}()
	dt.Test(t, d, []byte("SELECT 1"))
}

func TestMigrate(t *testing.T) {
	p := &Gbase8s{}
	d, err := p.Open(gbaseDNS)
	if err != nil {
		t.Fatal(err)
	}
	defer func() {
		if err := d.Close(); err != nil {
			t.Error(err)
		}
	}()

	m, err := migrate.NewWithDatabaseInstance("file://./examples/migrations", "c11", d)
	if err != nil {
		t.Fatal(err)
	}
	dt.TestMigrate(t, m)
}

func TestVersion(t *testing.T) {
	expectedVersion := 1
	p := &Gbase8s{}
	d, err := p.Open(gbaseDNS)
	if err != nil {
		t.Fatal(err)
	}
	defer func() {
		if err := d.Close(); err != nil {
			t.Error(err)
		}
	}()

	err = d.SetVersion(expectedVersion, false)
	if err != nil {
		t.Fatal(err)
	}

	version, _, err := d.Version()
	if err != nil {
		t.Fatal(err)
	}

	if version != expectedVersion {
		t.Fatal("Version mismatch")
	}
}

func TestDrop(t *testing.T) {
	p := &Gbase8s{}
	d, err := p.Open(gbaseDNS)
	if err != nil {
		t.Fatal(err)
	}
	defer func() {
		if err := d.Close(); err != nil {
			t.Error(err)
		}
	}()

	err = d.Drop()
	if err != nil {
		t.Fatal(err)
	}
}

// func TestCustomQuery(t *testing.T) {
// 	p := &Gbase8s{}
// 	// x-migrations-table=
// 	// x-lock-table=
// 	// x-force-lock=
// 	// x-statement-timeout
// 	_, err := p.Open(gbaseDNS + "&x-migrations-table=mt&x-lock-table=lockt")
// 	if err != nil {
// 		t.Fatal(err)
// 	}
// }
